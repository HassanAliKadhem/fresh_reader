// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    account,
    category,
    subscription,
    article,
    delayed,
    settings,
  ];
  late final Shape0 account = Shape0(
      source: i0.VersionedTable(
        entityName: 'account',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 category = Shape1(
      source: i0.VersionedTable(
        entityName: 'category',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(server_i_d, account)',
        ],
        columns: [
          _column_0,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 subscription = Shape2(
      source: i0.VersionedTable(
        entityName: 'subscription',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(server_i_d, account)',
        ],
        columns: [
          _column_0,
          _column_7,
          _column_8,
          _column_11,
          _column_9,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 article = Shape3(
      source: i0.VersionedTable(
        entityName: 'article',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(server_i_d, account, subscription)',
        ],
        columns: [
          _column_0,
          _column_7,
          _column_15,
          _column_8,
          _column_9,
          _column_12,
          _column_16,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 delayed = Shape4(
      source: i0.VersionedTable(
        entityName: 'delayed',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_8,
          _column_21,
          _column_22,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 settings = Shape5(
      source: i0.VersionedTable(
        entityName: 'settings',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_28,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get provider =>
      columnsByName['provider']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get serverUrl =>
      columnsByName['server_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get userName =>
      columnsByName['user_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get password =>
      columnsByName['password']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get updatedArticleTime =>
      columnsByName['updated_article_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get updatedStarredTime =>
      columnsByName['updated_starred_time']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('provider', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('server_url', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('user_name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('password', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>('updated_article_time', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>('updated_starred_time', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get serverID =>
      columnsByName['server_i_d']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get account =>
      columnsByName['account']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get catUrl =>
      columnsByName['cat_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('server_i_d', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('account', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES account (id)'));
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('title', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('cat_url', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get serverID =>
      columnsByName['server_i_d']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get account =>
      columnsByName['account']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get category =>
      columnsByName['category']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get url =>
      columnsByName['url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get htmlUrl =>
      columnsByName['html_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get iconUrl =>
      columnsByName['icon_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('category', aliasedName, true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES category (id)'));
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('url', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('html_url', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('icon_url', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get serverID =>
      columnsByName['server_i_d']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get subscription =>
      columnsByName['subscription']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get account =>
      columnsByName['account']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get url =>
      columnsByName['url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get image =>
      columnsByName['image']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get published =>
      columnsByName['published']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get read =>
      columnsByName['read']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get starred =>
      columnsByName['starred']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_15(String aliasedName) =>
    i1.GeneratedColumn<int>('subscription', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES subscription (id)'));
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('image', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>('published', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<bool> _column_19(String aliasedName) =>
    i1.GeneratedColumn<bool>('read', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('CHECK ("read" IN (0, 1))'));
i1.GeneratedColumn<bool> _column_20(String aliasedName) =>
    i1.GeneratedColumn<bool>('starred', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("starred" IN (0, 1))'));

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get account =>
      columnsByName['account']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get article =>
      columnsByName['article']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get action =>
      columnsByName['action']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_21(String aliasedName) =>
    i1.GeneratedColumn<int>('article', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES article (id)'));
i1.GeneratedColumn<int> _column_22(String aliasedName) =>
    i1.GeneratedColumn<int>('action', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get accountId =>
      columnsByName['account_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get fontSize =>
      columnsByName['font_size']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get lineHeight =>
      columnsByName['line_height']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get wordSpacing =>
      columnsByName['word_spacing']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get font =>
      columnsByName['font']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isBionic =>
      columnsByName['is_bionic']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_23(String aliasedName) =>
    i1.GeneratedColumn<int>('account_id', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<double> _column_24(String aliasedName) =>
    i1.GeneratedColumn<double>('font_size', aliasedName, false,
        type: i1.DriftSqlType.double, defaultValue: const Constant(14.0));
i1.GeneratedColumn<double> _column_25(String aliasedName) =>
    i1.GeneratedColumn<double>('line_height', aliasedName, false,
        type: i1.DriftSqlType.double, defaultValue: const Constant(1.5));
i1.GeneratedColumn<double> _column_26(String aliasedName) =>
    i1.GeneratedColumn<double>('word_spacing', aliasedName, false,
        type: i1.DriftSqlType.double, defaultValue: const Constant(0.0));
i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>('font', aliasedName, false,
        type: i1.DriftSqlType.string, defaultValue: const Constant("Arial"));
i1.GeneratedColumn<bool> _column_28(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_bionic', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_bionic" IN (0, 1))'),
        defaultValue: const Constant(false));
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
